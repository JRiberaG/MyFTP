package main;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import managers.ClientManager;
import managers.ServerManager;
import threads.TransferClient;
import threads.TransferServer;

/**
 * @author  : Jorge Ribera
 * @Date    : 30/05/20
 */
public class JFrameMain extends javax.swing.JFrame {
    
    private static final int DEF_PORT = 5000;
    public static ServerManager serverManager;
    public static ClientManager clientManager;
    public static TransferServer transferServer;
    public static TransferClient transferClient;
    
    private static boolean asServer;
    public static String strResult = "";
    
    private static JFileChooser openFileChooser;

    public JFrameMain() {
        initComponents();
        
        setAsServer();
        
        configFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbGroupRole = new javax.swing.ButtonGroup();
        dialogAbout = new javax.swing.JDialog();
        lblAboutDesc = new javax.swing.JLabel();
        lblAboutVersion = new javax.swing.JLabel();
        lblAboutName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblAboutDate = new javax.swing.JLabel();
        lblAboutGithub = new javax.swing.JLabel();
        lblAboutAuthor = new javax.swing.JLabel();
        dialogHow = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        panelRole = new javax.swing.JPanel();
        rbServer = new javax.swing.JRadioButton();
        rbClient = new javax.swing.JRadioButton();
        panelConnection = new javax.swing.JPanel();
        lblIP = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        etIP = new javax.swing.JTextField();
        btnDisconnect = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        fetPort = new javax.swing.JFormattedTextField();
        lblErrIP = new javax.swing.JLabel();
        lblErrPort = new javax.swing.JLabel();
        panelTransfer = new javax.swing.JPanel();
        lblSelectFiles = new javax.swing.JLabel();
        etPath = new javax.swing.JTextField();
        btnChooser = new javax.swing.JButton();
        scrollList = new javax.swing.JScrollPane();
        listFiles = new javax.swing.JList<>();
        btnClearTransfer = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        lblPath = new javax.swing.JLabel();
        lblErrPath = new javax.swing.JLabel();
        lblErrFiles = new javax.swing.JLabel();
        panelResults = new javax.swing.JPanel();
        btnClearResults = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        menuHowTo = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenu();

        dialogAbout.setTitle("About - MyFTP");
        dialogAbout.setMinimumSize(new java.awt.Dimension(415, 300));
        dialogAbout.setModal(true);
        dialogAbout.setPreferredSize(new java.awt.Dimension(415, 300));

        lblAboutDesc.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblAboutDesc.setForeground(new java.awt.Color(102, 102, 102));
        lblAboutDesc.setText("A free Client/Server app to share files between computers");

        lblAboutVersion.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        lblAboutVersion.setText("Version 1.0");

        lblAboutName.setFont(new java.awt.Font("Lucida Sans", 0, 24)); // NOI18N
        lblAboutName.setText("MyFTP");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        lblAboutDate.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblAboutDate.setText("May 2020");

        lblAboutGithub.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblAboutGithub.setText("https://www.github.com/jriberag");

        lblAboutAuthor.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        lblAboutAuthor.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow"));
        lblAboutAuthor.setText("Jorge Ribera");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(lblAboutAuthor))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblAboutGithub))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblAboutDate))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(lblAboutAuthor)
                .addGap(13, 13, 13)
                .addComponent(lblAboutGithub)
                .addGap(5, 5, 5)
                .addComponent(lblAboutDate))
        );

        javax.swing.GroupLayout dialogAboutLayout = new javax.swing.GroupLayout(dialogAbout.getContentPane());
        dialogAbout.getContentPane().setLayout(dialogAboutLayout);
        dialogAboutLayout.setHorizontalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(lblAboutVersion))
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblAboutName))
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblAboutDesc))
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dialogAboutLayout.setVerticalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblAboutVersion)
                .addGap(7, 7, 7)
                .addComponent(lblAboutName)
                .addGap(11, 11, 11)
                .addComponent(lblAboutDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        dialogHow.setTitle("How to use - MyFTP");
        dialogHow.setMinimumSize(new java.awt.Dimension(650, 350));
        dialogHow.setPreferredSize(new java.awt.Dimension(650, 350));
        dialogHow.setResizable(false);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabel1.setText("<html>\n     <head>\n          <style>\n                         span{color: #4d79ff}\n          </style>\n     </head>\n     <body>\n          <h2>How to use</h2>\n          <p>&nbsp;&nbsp; 1) Decide the role of this machine (Server-Client). <br/><br/>\n          <p>&nbsp;&nbsp;&nbsp; If you chose <b>Server</b>:<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 2.1) Indicate the port, press <span>Connect</span> and wait for the Client to connect.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 3.1) Once the client connected, select the folder where you want the files to be downloaded to <br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (you can left the field empty and the files will be downloaded where you have the .jar. <br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Example: if you placed the .jar in your desktop, the files will be downloaded there).<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 4.1) Press <span>Receive</span> and wait until all the files have been uploaded.</p><br/><br/>\n\n          <p>&nbsp;&nbsp;&nbsp; If you chose <b>Client</b>:<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 2.2) Indicate the IP Address of the Server, the port and press <span>Connect</span>.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 3.2) Once you've connected to the Server, select the folder where the files you want to upload are.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then, all the files in the folder will be shown in the list.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp; 4.2) Pick the files that you want to upload, press <span>Send</span> and wait until the transfer is done.</p><br/><br/>\n     </body>\n</html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setMinimumSize(new java.awt.Dimension(500, 500));
        jLabel1.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout dialogHowLayout = new javax.swing.GroupLayout(dialogHow.getContentPane());
        dialogHow.getContentPane().setLayout(dialogHowLayout);
        dialogHowLayout.setHorizontalGroup(
            dialogHowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHowLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dialogHowLayout.setVerticalGroup(
            dialogHowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHowLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyFTP");
        setIconImage(new ImageIcon("C:" + File.separator + "Users" + File.separator + "jribg" + File.separator + "Desktop" + File.separator + "icon.png").getImage());
        setMinimumSize(new java.awt.Dimension(750, 650));
        setPreferredSize(new java.awt.Dimension(750, 650));
        setResizable(false);

        panelRole.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Role", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        rbGroupRole.add(rbServer);
        rbServer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbServer.setSelected(true);
        rbServer.setText("Server");
        rbServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbServerActionPerformed(evt);
            }
        });

        rbGroupRole.add(rbClient);
        rbClient.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbClient.setText("Client");
        rbClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRoleLayout = new javax.swing.GroupLayout(panelRole);
        panelRole.setLayout(panelRoleLayout);
        panelRoleLayout.setHorizontalGroup(
            panelRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRoleLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(rbServer)
                .addGap(42, 42, 42)
                .addComponent(rbClient)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        panelRoleLayout.setVerticalGroup(
            panelRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRoleLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbServer)
                    .addComponent(rbClient))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        panelConnection.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Connection config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11))); // NOI18N

        lblIP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIP.setText("Server IP:");

        lblPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPort.setText("Port:");

        etIP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        etIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etIPActionPerformed(evt);
            }
        });

        btnDisconnect.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDisconnect.setText("Disconnect");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        btnConnect.setBackground(java.awt.SystemColor.activeCaption);
        btnConnect.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setNextFocusableComponent(etPath);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        fetPort.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fetPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetPortActionPerformed(evt);
            }
        });

        lblErrIP.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblErrIP.setForeground(java.awt.Color.red);
        lblErrIP.setText("!");
        lblErrIP.setToolTipText("This field can't be empty!");

        lblErrPort.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblErrPort.setForeground(java.awt.Color.red);
        lblErrPort.setText("!");
        lblErrPort.setToolTipText("This field can't be empty!");

        javax.swing.GroupLayout panelConnectionLayout = new javax.swing.GroupLayout(panelConnection);
        panelConnection.setLayout(panelConnectionLayout);
        panelConnectionLayout.setHorizontalGroup(
            panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConnectionLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConnectionLayout.createSequentialGroup()
                        .addComponent(lblIP)
                        .addGap(16, 16, 16)
                        .addComponent(etIP, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lblErrIP, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelConnectionLayout.createSequentialGroup()
                        .addComponent(lblPort)
                        .addGap(43, 43, 43)
                        .addComponent(fetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lblErrPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelConnectionLayout.createSequentialGroup()
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelConnectionLayout.setVerticalGroup(
            panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConnectionLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConnectionLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblIP))
                    .addComponent(etIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrIP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConnectionLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblPort))
                    .addComponent(fetPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrPort))
                .addGap(10, 10, 10)
                .addGroup(panelConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        panelTransfer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Transfer options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lblSelectFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSelectFiles.setText("Select the file(s) to transfer:");

        etPath.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        etPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etPathActionPerformed(evt);
            }
        });

        btnChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserActionPerformed(evt);
            }
        });

        listFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        scrollList.setViewportView(listFiles);

        btnClearTransfer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnClearTransfer.setText("Clear");
        btnClearTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTransferActionPerformed(evt);
            }
        });

        btnSend.setBackground(java.awt.SystemColor.activeCaption);
        btnSend.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        lblPath.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPath.setText("Path of the file(s):");

        lblErrPath.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblErrPath.setForeground(java.awt.Color.red);
        lblErrPath.setText("!");
        lblErrPath.setToolTipText("That's not a valid path! If this machine is acting as server, this field can be empty.");

        lblErrFiles.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblErrFiles.setForeground(java.awt.Color.red);
        lblErrFiles.setText("!");
        lblErrFiles.setToolTipText("That's not a valid path! If this machine is acting as server, this field can be empty.");

        javax.swing.GroupLayout panelTransferLayout = new javax.swing.GroupLayout(panelTransfer);
        panelTransfer.setLayout(panelTransferLayout);
        panelTransferLayout.setHorizontalGroup(
            panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransferLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPath)
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addComponent(etPath, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnChooser)
                        .addGap(10, 10, 10)
                        .addComponent(lblErrPath, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSelectFiles)
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(lblErrFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnClearTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelTransferLayout.setVerticalGroup(
            panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransferLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(lblPath)
                .addGap(1, 1, 1)
                .addGroup(panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(etPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btnChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(lblSelectFiles)
                .addGap(5, 5, 5)
                .addGroup(panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelTransferLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblErrFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(panelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend)
                    .addComponent(btnClearTransfer)))
        );

        panelResults.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11))); // NOI18N

        btnClearResults.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnClearResults.setText("Clear");
        btnClearResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearResultsActionPerformed(evt);
            }
        });

        txtArea.setEditable(false);
        txtArea.setBackground(new java.awt.Color(51, 51, 51));
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        txtArea.setForeground(new java.awt.Color(204, 204, 204));
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        javax.swing.GroupLayout panelResultsLayout = new javax.swing.GroupLayout(panelResults);
        panelResults.setLayout(panelResultsLayout);
        panelResultsLayout.setHorizontalGroup(
            panelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultsLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panelResultsLayout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(btnClearResults, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelResultsLayout.setVerticalGroup(
            panelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(btnClearResults)
        );

        menuHowTo.setText("How to");
        menuHowTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuHowToMouseClicked(evt);
            }
        });
        menuBar.add(menuHowTo);

        menuAbout.setText("About");
        menuAbout.setMargin(new java.awt.Insets(3, 2, 2, 2));
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAboutMouseClicked(evt);
            }
        });
        menuBar.add(menuAbout);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(panelResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelResults, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbServerActionPerformed
        setAsServer();
    }//GEN-LAST:event_rbServerActionPerformed

    private void rbClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClientActionPerformed
        setAsClient();
    }//GEN-LAST:event_rbClientActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        connect();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        if (asServer) {
            try {
                activatePanelConnection();
                clearTransfer();
                serverManager.close();
                btnDisconnect.setEnabled(false);

                deactivatePanelTransfer();
                activatePanelRole();
                etIP.setEnabled(false);
                lblIP.setEnabled(false);

                btnConnect.requestFocus();
            } catch (IOException ex) {
                strResult += "Status: There was a problem closing the server.\n";
                txtArea.setText(strResult);
            }
        } else {
            try {
                activatePanelConnection();
                clearTransfer();
                clientManager.close();
                strResult += "Status: Connection closed.\n";
                txtArea.setText(strResult);
                activatePanelRole();
                deactivatePanelTransfer();
                clearTransfer();
                
                btnConnect.requestFocus();
            } catch (IOException ex) {
                strResult += "Status: There was a problem closing the connection.\n";
                txtArea.setText(strResult);
            }
        }
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooserActionPerformed
        int returnValue = openFileChooser.showOpenDialog(this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            etPath.setText(openFileChooser.getSelectedFile().getAbsolutePath());
            // If it's set has Client, fills the listBox with the files from within the path
            if(!asServer){
                addFiles(new File(etPath.getText()));
            }
        }
    }//GEN-LAST:event_btnChooserActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        boolean pathOk;
        if (asServer) {
            pathOk = true;
            try {
                // Checks if a valid path has been selecter or not
                if (!etPath.getText().isEmpty()) {
                    if (!new File(etPath.getText()).isDirectory()){
                        lblErrPath.setVisible(true);
                        pathOk = false;
                    } else {
                        lblErrPath.setVisible(false);
                        serverManager.setPath(etPath.getText());
                    }
                }

                if (pathOk) {
                    transferServer.setReceive(true);
                    
                    deactivatePanelTransfer();
                }
            } catch (Exception ex) {
                System.err.println(ex.toString());
            }
            txtArea.setText(strResult);
        } else {
            pathOk = false;
            // Checks 
            if (!etPath.getText().isEmpty()) {
                lblErrPath.setVisible(false);
                File file = new File(etPath.getText());
                if (!file.isDirectory()){
                    lblErrPath.setVisible(true);
                    clearFiles();
                }
                // The path is a directory
                else {
                    lblErrPath.setVisible(false);
                    // Get the number of elements selected from the list
                    int numSelected = listFiles.getSelectedIndices().length;
                    // Get those elements' indexes
                    int []selectedIndexes = listFiles.getSelectedIndices();
                    // At least one file has been selected
                    if (numSelected > 0) {
                        lblErrFiles.setVisible(false);

                        try {
                            // Iterates through those elements to get their filenames
                            ArrayList<String> filenames = new ArrayList<>();
                            for (Integer i : selectedIndexes) {
                                filenames.add(listFiles.getModel().getElementAt(i));
                            }
                            
                            // Creates a new thread with the info collected: number of elements,
                            // the name of those elements and the path to store those elements
                            transferClient = new TransferClient(numSelected, filenames, etPath.getText());
                            transferClient.start();
                            
                            deactivatePanelTransfer();
                            
                        } catch (Exception ex) {
                            System.out.println(ex.toString());
                        }
                    } 
                    // Not a single file has been selected
                    else {
                        lblErrFiles.setVisible(true);
                        clearFiles();
                    }
                }
            } else {
                lblErrPath.setVisible(true);
                clearFiles();
            }
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnClearTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTransferActionPerformed
        clearTransfer();
    }//GEN-LAST:event_btnClearTransferActionPerformed

    private void etPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etPathActionPerformed
        File file = new File(etPath.getText());
        if (file.isDirectory()) {
            lblErrPath.setVisible(false);
            addFiles(file);
        } else {
            lblErrPath.setVisible(true);
            clearFiles();
        }
    }//GEN-LAST:event_etPathActionPerformed

    private void btnClearResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearResultsActionPerformed
        strResult = "";
        txtArea.setText(strResult);
    }//GEN-LAST:event_btnClearResultsActionPerformed

    private void etIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etIPActionPerformed
        connect();
    }//GEN-LAST:event_etIPActionPerformed

    private void fetPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetPortActionPerformed
        connect();
    }//GEN-LAST:event_fetPortActionPerformed

    private void menuAboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAboutMouseClicked
        dialogAbout.setVisible(true);
    }//GEN-LAST:event_menuAboutMouseClicked

    private void menuHowToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuHowToMouseClicked
        dialogHow.setVisible(true);
    }//GEN-LAST:event_menuHowToMouseClicked

    // <editor-fold defaultstate="collapsed" desc="Main & Variables">
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameMain().setVisible(true);
            }
        });
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnChooser;
    private javax.swing.JButton btnClearResults;
    private static javax.swing.JButton btnClearTransfer;
    private static javax.swing.JButton btnConnect;
    private static javax.swing.JButton btnDisconnect;
    private static javax.swing.JButton btnSend;
    private javax.swing.JDialog dialogAbout;
    private javax.swing.JDialog dialogHow;
    private static javax.swing.JTextField etIP;
    private static javax.swing.JTextField etPath;
    private static javax.swing.JFormattedTextField fetPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAboutAuthor;
    private javax.swing.JLabel lblAboutDate;
    private javax.swing.JLabel lblAboutDesc;
    private javax.swing.JLabel lblAboutGithub;
    private javax.swing.JLabel lblAboutName;
    private javax.swing.JLabel lblAboutVersion;
    static javax.swing.JLabel lblErrFiles;
    private javax.swing.JLabel lblErrIP;
    static javax.swing.JLabel lblErrPath;
    private javax.swing.JLabel lblErrPort;
    private static javax.swing.JLabel lblIP;
    static javax.swing.JLabel lblPath;
    private static javax.swing.JLabel lblPort;
    static javax.swing.JLabel lblSelectFiles;
    private static javax.swing.JList<String> listFiles;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuHowTo;
    private javax.swing.JPanel panelConnection;
    private javax.swing.JPanel panelResults;
    private static javax.swing.JPanel panelRole;
    private static javax.swing.JPanel panelTransfer;
    private static javax.swing.JRadioButton rbClient;
    private javax.swing.ButtonGroup rbGroupRole;
    private static javax.swing.JRadioButton rbServer;
    private javax.swing.JScrollPane scrollList;
    public static javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Sets">
    private void setAsServer() {
        clientManager = null;
        
        asServer = true;
        
        deactivatePanelTransfer();
        activatePanelResults();
        clearFields();
        
        fetPort.setText(String.valueOf(DEF_PORT));
        lblIP.setEnabled(false);
        etIP.setEnabled(false);
        lblSelectFiles.setEnabled(false);
        listFiles.setEnabled(false);
        btnSend.setEnabled(false);
        btnClearTransfer.setEnabled(false);
        
        btnConnect.setText("New connection");
        btnSend.setText("Receive");
        lblPath.setText("Path (to download the files):");
        
        fetPort.requestFocus();
    }
    
    private void setAsClient() {
        serverManager = null;
        
        asServer = false;
        
        deactivatePanelTransfer();
        activatePanelResults();
        clearFields();
        
        fetPort.setText(String.valueOf(DEF_PORT));
        lblIP.setEnabled(true);
        etIP.setEnabled(true);
        
        btnConnect.setText("Connect");
        btnSend.setText("Send");
        lblPath.setText("Path (upload files):");
        
        etIP.requestFocus();
    }
    
    public static void setForNewConnection(boolean isServer) {
        if (isServer){
            btnConnect.requestFocus();
            lblIP.setEnabled(false);
            etIP.setEnabled(false);
        } else {
            etIP.requestFocus();
        }
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Activaters/Deactivaters">
    private void deactivatePanelRole() {
        panelRole.setEnabled(false);
        rbServer.setEnabled(false);
        rbClient.setEnabled(false);
    }

    public static void activatePanelRole() {
        panelRole.setEnabled(true);
        rbServer.setEnabled(true);
        rbClient.setEnabled(true);
    }
    
    public static void activatePanelConnection() {
        lblIP.setEnabled(true);
        lblPort.setEnabled(true);
        etIP.setEnabled(true);
        fetPort.setEnabled(true);
        btnConnect.setEnabled(true);
        btnDisconnect.setEnabled(false);
    }
    
    private static void deactivatePanelConnection() {
        lblIP.setEnabled(false);
        lblPort.setEnabled(false);
        etIP.setEnabled(false);
        fetPort.setEnabled(false);
        btnConnect.setEnabled(false);
        btnDisconnect.setEnabled(true);
    }
    
    public static void deactivatePanelTransfer() {
        panelTransfer.setEnabled(false);
        
        etPath.setEnabled(false);
        btnChooser.setEnabled(false);
        listFiles.setEnabled(false);
        
        lblSelectFiles.setEnabled(false);
        lblPath.setEnabled(false);
        
        btnSend.setEnabled(false);
        btnClearTransfer.setEnabled(false);
        clearTransfer();
    }
    
    private void activatePanelTransfer() {
        panelTransfer.setEnabled(true);

        etPath.setEnabled(true);
        btnChooser.setEnabled(true);
        listFiles.setEnabled(true);

        lblSelectFiles.setEnabled(true);
        lblPath.setEnabled(true);

        btnSend.setEnabled(true);
        btnClearTransfer.setEnabled(true);
        
    }
    
    private void deactivatePanelResults() {
        panelResults.setEnabled(false);
        btnClearResults.setEnabled(false);
        txtArea.setEnabled(false);
    }
    
    private void activatePanelResults() {
        panelResults.setEnabled(true);
        btnClearResults.setEnabled(true);
        txtArea.setEnabled(true);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Cleaner methods">
    private void clearFields() {
        lblErrIP.setVisible(false);
        lblErrPort.setVisible(false);
        lblErrPath.setVisible(false);
        etIP.setText("");
        fetPort.setText("");
        clearTransfer();
        
        strResult = "";
        txtArea.setText(strResult);
    }
    
    private static void clearTransfer() {
        etPath.setText("");
        clearFiles();
        lblErrPath.setVisible(false);
        lblErrFiles.setVisible(false);
    }

    private static void clearFiles() {
        DefaultListModel model = new DefaultListModel();
        model.removeAllElements();
        listFiles.setModel(model);
    }
    // </editor-fold>
    
    private void configFileChooser() {
        openFileChooser = new JFileChooser();
        openFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }

    private void addFiles(File dir) {
        DefaultListModel model = new DefaultListModel();
        ArrayList<File> files = new ArrayList<>(Arrays.asList(dir.listFiles()));
        for (File f : files) {
            if (f.isFile()) {
                model.addElement(f.getName());
            }
        }
        listFiles.setModel(model);
    }

    private void connect() {
        if (!fetPort.getText().isEmpty()) {
            lblErrPort.setVisible(false);
            
            if (asServer){
                // If there was a TransferServer created already, we delete it
                if (transferServer != null) {
                    transferServer = null; 
                }
                
                transferServer = new TransferServer(Integer.parseInt(fetPort.getText()));
                transferServer.start();

                // Deactivate some panels
                deactivatePanelRole();
                deactivatePanelConnection();

                // Enable some components of panelTransfer
                panelTransfer.setEnabled(true);
                lblPath.setEnabled(true);
                etPath.setEnabled(true);
                btnChooser.setEnabled(true);
                btnSend.setEnabled(true);
                btnClearTransfer.setEnabled(true);

                btnChooser.requestFocus();
            } else {
                if (!etIP.getText().isEmpty()){
                    lblErrIP.setVisible(false);
                    try {
                        clientManager = new ClientManager(etIP.getText(), Integer.parseInt(fetPort.getText()));
                        
                        deactivatePanelRole();
                        deactivatePanelConnection();
                        activatePanelTransfer();
                        activatePanelResults();
                        
                        etPath.requestFocus();
                        
                    } catch (IOException ex) {
                        strResult += "Status: Couldn't connect. Check whether the IP and the port are corrects.\n";
                        txtArea.setText(strResult);
                    }
                } else {
                    lblErrIP.setVisible(true);
                }
            }
        } else {
            lblErrPort.setVisible(true);
        }
    }
}
